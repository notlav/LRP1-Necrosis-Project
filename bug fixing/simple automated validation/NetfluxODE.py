# NetfluxODE.py 
# Automatically generated by Netflux on 23-Sep-2024 
import numpy as np 
def ODEfunc(t,y,tau,ymax,w,n,EC50): 

	rpar = np.array([w,n,EC50]) 
	Akt = 0 
	AP1 = 1 
	apoptosis = 2 
	ASK1 = 3 
	Bad = 4 
	Bax = 5 
	Bcl2 = 6 
	Bcl2t = 7 
	Bim = 8 
	CAD = 9 
	cas3 = 10 
	cas9 = 11 
	cellDeath = 12 
	CREB = 13 
	cytc = 14 
	DNAfrag = 15 
	EGF = 16 
	EGFR = 17 
	ERBB = 18 
	ERK12 = 19 
	FGF = 20 
	FGFR = 21 
	FLT3 = 22 
	FLT3L = 23 
	iCAD = 24 
	iCADt = 25 
	IGF1 = 26 
	IGF1R = 27 
	IkB = 28 
	IKK = 29 
	JAK = 30 
	JNK = 31 
	KIT = 32 
	LRP1 = 33 
	LRP1ag = 34 
	MEK12 = 35 
	MEK36 = 36 
	MEK47 = 37 
	MOMP = 38 
	NFkB = 39 
	NOX = 40 
	Noxa = 41 
	NRG1 = 42 
	p38 = 43 
	p53 = 44 
	PARP = 45 
	PDGF = 46 
	PDGFR = 47 
	PDK1 = 48 
	PI3K = 49 
	PKC = 50 
	PUMA = 51 
	Raf = 52 
	Ras = 53 
	ROS = 54 
	RSK = 55 
	SCF = 56 
	Shc1 = 57 
	Shp2 = 58 
	Smac = 59 
	Src = 60 
	STAT = 61 
	Trx = 62 
	Trxt = 63 
	VEGF = 64 
	VEGFR = 65 
	xIAP = 66 
	xIAPt = 67 
	dydt = np.zeros(68) 
	dydt[Akt] = (act(y[PDK1],rpar[:,90])*ymax[Akt] - y[Akt])/tau[Akt] 
	dydt[AP1] = (act(y[JNK],rpar[:,70])*ymax[AP1] - y[AP1])/tau[AP1] 
	dydt[apoptosis] = (act(y[DNAfrag],rpar[:,51])*ymax[apoptosis] - y[apoptosis])/tau[apoptosis] 
	dydt[ASK1] = (OR(inhib(y[Trx],rpar[:,39]),AND(w[93],[inhib(y[Akt],rpar[:,93]),act(y[ROS],rpar[:,93])]))*ymax[ASK1] - y[ASK1])/tau[ASK1] 
	dydt[Bad] = (OR(inhib(y[Akt],rpar[:,15]),act(y[JNK],rpar[:,71]))*ymax[Bad] - y[Bad])/tau[Bad] 
	dydt[Bax] = (OR(AND(w[14],[inhib(y[Akt],rpar[:,14]),act(y[ROS],rpar[:,14])]),OR(inhib(y[Bcl2],rpar[:,18]),act(y[p53],rpar[:,84])))*ymax[Bax] - y[Bax])/tau[Bax] 
	dydt[Bcl2] = (OR(AND(w[17],[inhib(y[Bad],rpar[:,17]),act(y[Bcl2t],rpar[:,17])]),OR(AND(w[19],[act(y[Bcl2t],rpar[:,19]),inhib(y[Bim],rpar[:,19])]),OR(AND(w[26],[act(y[Bcl2t],rpar[:,26]),inhib(y[JNK],rpar[:,26])]),OR(AND(w[28],[act(y[Bcl2t],rpar[:,28]),inhib(y[Noxa],rpar[:,28])]),AND(w[32],[act(y[Bcl2t],rpar[:,32]),inhib(y[PUMA],rpar[:,32])])))))*ymax[Bcl2] - y[Bcl2])/tau[Bcl2] 
	dydt[Bcl2t] = (OR(w[1],OR(act(y[CREB],rpar[:,49]),OR(act(y[NFkB],rpar[:,81]),act(y[STAT],rpar[:,95]))))*ymax[Bcl2t] - y[Bcl2t])/tau[Bcl2t] 
	dydt[Bim] = (OR(inhib(y[Akt],rpar[:,16]),OR(act(y[JNK],rpar[:,72]),act(y[p38],rpar[:,83])))*ymax[Bim] - y[Bim])/tau[Bim] 
	dydt[CAD] = (inhib(y[iCAD],rpar[:,23])*ymax[CAD] - y[CAD])/tau[CAD] 
	dydt[cas3] = (OR(inhib(y[xIAP],rpar[:,40]),act(y[cas9],rpar[:,48]))*ymax[cas3] - y[cas3])/tau[cas3] 
	dydt[cas9] = (OR(inhib(y[xIAP],rpar[:,41]),act(y[cytc],rpar[:,50]))*ymax[cas9] - y[cas9])/tau[cas9] 
	dydt[cellDeath] = (act(y[apoptosis],rpar[:,44])*ymax[cellDeath] - y[cellDeath])/tau[cellDeath] 
	dydt[CREB] = (act(y[RSK],rpar[:,94])*ymax[CREB] - y[CREB])/tau[CREB] 
	dydt[cytc] = (act(y[MOMP],rpar[:,79])*ymax[cytc] - y[cytc])/tau[cytc] 
	dydt[DNAfrag] = (AND(w[29],[act(y[CAD],rpar[:,29]),inhib(y[PARP],rpar[:,29])])*ymax[DNAfrag] - y[DNAfrag])/tau[DNAfrag] 
	dydt[EGF] = (w[2]*ymax[EGF] - y[EGF])/tau[EGF] 
	dydt[EGFR] = (act(y[EGF],rpar[:,22])*ymax[EGFR] - y[EGFR])/tau[EGFR] 
	dydt[ERBB] = (act(y[NRG1],rpar[:,38])*ymax[ERBB] - y[ERBB])/tau[ERBB] 
	dydt[ERK12] = (act(y[MEK12],rpar[:,76])*ymax[ERK12] - y[ERK12])/tau[ERK12] 
	dydt[FGF] = (w[3]*ymax[FGF] - y[FGF])/tau[FGF] 
	dydt[FGFR] = (act(y[FGF],rpar[:,31])*ymax[FGFR] - y[FGFR])/tau[FGFR] 
	dydt[FLT3] = (act(y[FLT3L],rpar[:,30])*ymax[FLT3] - y[FLT3])/tau[FLT3] 
	dydt[FLT3L] = (w[4]*ymax[FLT3L] - y[FLT3L])/tau[FLT3L] 
	dydt[iCAD] = (AND(w[21],[inhib(y[cas3],rpar[:,21]),act(y[iCADt],rpar[:,21])])*ymax[iCAD] - y[iCAD])/tau[iCAD] 
	dydt[iCADt] = (w[5]*ymax[iCADt] - y[iCADt])/tau[iCADt] 
	dydt[IGF1] = (w[6]*ymax[IGF1] - y[IGF1])/tau[IGF1] 
	dydt[IGF1R] = (act(y[IGF1],rpar[:,65])*ymax[IGF1R] - y[IGF1R])/tau[IGF1R] 
	dydt[IkB] = (inhib(y[IKK],rpar[:,25])*ymax[IkB] - y[IkB])/tau[IkB] 
	dydt[IKK] = (act(y[Akt],rpar[:,42])*ymax[IKK] - y[IKK])/tau[IKK] 
	dydt[JAK] = (OR(act(y[EGFR],rpar[:,52]),OR(act(y[ERBB],rpar[:,55]),OR(act(y[FGFR],rpar[:,59]),OR(act(y[FLT3],rpar[:,62]),OR(act(y[IGF1R],rpar[:,66]),OR(act(y[KIT],rpar[:,73]),OR(act(y[PDGFR],rpar[:,87]),act(y[VEGFR],rpar[:,96]))))))))*ymax[JAK] - y[JAK])/tau[JAK] 
	dydt[JNK] = (act(y[MEK47],rpar[:,78])*ymax[JNK] - y[JNK])/tau[JNK] 
	dydt[KIT] = (act(y[SCF],rpar[:,27])*ymax[KIT] - y[KIT])/tau[KIT] 
	dydt[LRP1] = (act(y[LRP1ag],rpar[:,99])*ymax[LRP1] - y[LRP1])/tau[LRP1] 
	dydt[LRP1ag] = (w[0]*ymax[LRP1ag] - y[LRP1ag])/tau[LRP1ag] 
	dydt[MEK12] = (act(y[Raf],rpar[:,92])*ymax[MEK12] - y[MEK12])/tau[MEK12] 
	dydt[MEK36] = (act(y[ASK1],rpar[:,45])*ymax[MEK36] - y[MEK36])/tau[MEK36] 
	dydt[MEK47] = (act(y[ASK1],rpar[:,46])*ymax[MEK47] - y[MEK47])/tau[MEK47] 
	dydt[MOMP] = (act(y[Bax],rpar[:,47])*ymax[MOMP] - y[MOMP])/tau[MOMP] 
	dydt[NFkB] = (inhib(y[IkB],rpar[:,24])*ymax[NFkB] - y[NFkB])/tau[NFkB] 
	dydt[NOX] = (0*ymax[NOX] - y[NOX])/tau[NOX] 
	dydt[Noxa] = (act(y[p53],rpar[:,85])*ymax[Noxa] - y[Noxa])/tau[Noxa] 
	dydt[NRG1] = (w[7]*ymax[NRG1] - y[NRG1])/tau[NRG1] 
	dydt[p38] = (act(y[MEK36],rpar[:,77])*ymax[p38] - y[p38])/tau[p38] 
	dydt[p53] = (act(y[AP1],rpar[:,43])*ymax[p53] - y[p53])/tau[p53] 
	dydt[PARP] = (inhib(y[cas3],rpar[:,20])*ymax[PARP] - y[PARP])/tau[PARP] 
	dydt[PDGF] = (w[8]*ymax[PDGF] - y[PDGF])/tau[PDGF] 
	dydt[PDGFR] = (OR(act(y[PDGF],rpar[:,35]),AND(w[104],[act(y[PDGF],rpar[:,104]),inhib(y[Shp2],rpar[:,104])]))*ymax[PDGFR] - y[PDGFR])/tau[PDGFR] 
	dydt[PDK1] = (act(y[PI3K],rpar[:,91])*ymax[PDK1] - y[PDK1])/tau[PDK1] 
	dydt[PI3K] = (OR(act(y[EGFR],rpar[:,53]),OR(act(y[ERBB],rpar[:,56]),OR(act(y[FGFR],rpar[:,60]),OR(act(y[FLT3],rpar[:,63]),OR(act(y[IGF1R],rpar[:,67]),OR(act(y[KIT],rpar[:,74]),OR(act(y[PDGFR],rpar[:,88]),OR(act(y[VEGFR],rpar[:,97]),OR(act(y[LRP1],rpar[:,100]),act(y[Src],rpar[:,108]))))))))))*ymax[PI3K] - y[PI3K])/tau[PI3K] 
	dydt[PKC] = (act(y[LRP1],rpar[:,102])*ymax[PKC] - y[PKC])/tau[PKC] 
	dydt[PUMA] = (act(y[p53],rpar[:,86])*ymax[PUMA] - y[PUMA])/tau[PUMA] 
	dydt[Raf] = (act(y[Ras],rpar[:,37])*ymax[Raf] - y[Raf])/tau[Raf] 
	dydt[Ras] = (OR(act(y[EGFR],rpar[:,54]),OR(act(y[ERBB],rpar[:,57]),OR(act(y[FGFR],rpar[:,61]),OR(act(y[FLT3],rpar[:,64]),OR(act(y[IGF1R],rpar[:,68]),OR(act(y[KIT],rpar[:,75]),OR(act(y[PDGFR],rpar[:,89]),OR(act(y[VEGFR],rpar[:,98]),OR(act(y[LRP1],rpar[:,101]),act(y[Src],rpar[:,107]))))))))))*ymax[Ras] - y[Ras])/tau[Ras] 
	dydt[ROS] = (OR(w[9],act(y[NOX],rpar[:,82]))*ymax[ROS] - y[ROS])/tau[ROS] 
	dydt[RSK] = (act(y[ERK12],rpar[:,58])*ymax[RSK] - y[RSK])/tau[RSK] 
	dydt[SCF] = (w[10]*ymax[SCF] - y[SCF])/tau[SCF] 
	dydt[Shc1] = (act(y[PKC],rpar[:,105])*ymax[Shc1] - y[Shc1])/tau[Shc1] 
	dydt[Shp2] = (act(y[LRP1],rpar[:,103])*ymax[Shp2] - y[Shp2])/tau[Shp2] 
	dydt[Smac] = (act(y[MOMP],rpar[:,80])*ymax[Smac] - y[Smac])/tau[Smac] 
	dydt[Src] = (OR(act(y[Shp2],rpar[:,106]),OR(act(y[PDGFR],rpar[:,109]),act(y[Shc1],rpar[:,110])))*ymax[Src] - y[Src])/tau[Src] 
	dydt[STAT] = (act(y[JAK],rpar[:,69])*ymax[STAT] - y[STAT])/tau[STAT] 
	dydt[Trx] = (AND(w[33],[inhib(y[ROS],rpar[:,33]),act(y[Trxt],rpar[:,33])])*ymax[Trx] - y[Trx])/tau[Trx] 
	dydt[Trxt] = (w[11]*ymax[Trxt] - y[Trxt])/tau[Trxt] 
	dydt[VEGF] = (w[12]*ymax[VEGF] - y[VEGF])/tau[VEGF] 
	dydt[VEGFR] = (act(y[VEGF],rpar[:,36])*ymax[VEGFR] - y[VEGFR])/tau[VEGFR] 
	dydt[xIAP] = (AND(w[34],[inhib(y[Smac],rpar[:,34]),act(y[xIAPt],rpar[:,34])])*ymax[xIAP] - y[xIAP])/tau[xIAP] 
	dydt[xIAPt] = (w[13]*ymax[xIAPt] - y[xIAPt])/tau[xIAPt] 
	return dydt 

# utility functions
 
def act(x, rpar): 
	# Extract parameters from rpar 
	w = rpar[0] 
	n = rpar[1] 
	EC50 = rpar[2]
 
	# hill activation function with parameters w (weight), n (Hill coeff), EC50 
	beta = ((EC50**n)-1)/(2*EC50**n-1) 
	K = (beta-1)**(1/n) 
	fact = w*(beta*x**n)/(K**n+x**n) 
	if fact > w: 
		fact = w 
	return fact
 
def inhib(x, rpar): 
	# Extract parameters from rpar 
	w = rpar[0] 
	# inverse hill function with parameters w (weight), n (Hill coeff), EC50 
	finhib = w - act(x, rpar) 
	return finhib
 
def OR(x, y): 
	# OR logic gate 
	z = x + y - x*y 
	return z
 
def AND(w, reactList): 
	# AND logic gate, multiplying all of the reactants together 
	if w == 0: 
		z = 0 
	else: 
		p = np.array(reactList).prod() 
		z = p/w**(len(reactList)-1) 
	return z
 
